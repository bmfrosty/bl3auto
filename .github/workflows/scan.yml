#
# Run a scan using Snyk and secgo
#
name: Scan
on:
  push:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  snyk:
    strategy:
      fail-fast: false
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.4.0
        
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
          
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: snyk.sarif

  secgo:
    strategy:
      fail-fast: false
    runs-on: ubuntu-20.04
    
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
        
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: '-no-fail -fmt sarif -out results.sarif ./...'
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: results.sarif
